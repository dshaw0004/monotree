const {Readability} = require('@mozilla/readability');

const {JSDOM} = require('jsdom');

// fetch('https://www.practical-go-lessons.com/chap-1-programming-a-computer').then((response) => {
//   return response.text();
// }).then((html) => {
//   const dom = new JSDOM(html);

//   const article = new Readability(dom.window.document).parse();
//   console.log(article);
// });

const html = `
<head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no"><link rel="icon" href="/favicon.png"><link rel="stylesheet" href="/katex.min.css"><script defer="" src="/katex.min.js"></script><script src="https://embed.videodelivery.net/embed/sdk.latest.js"></script><title>Programming A Computer - Practical Go Lessons</title><link href="/css/chunk-03c6fe76.4cd5a574.css" rel="prefetch"><link href="/css/chunk-0c24fb4c.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-12073a46.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-19310c36.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-1c9085c0.3b6c8ecc.css" rel="prefetch"><link href="/css/chunk-1e2993f9.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-1e75ffcc.486297c4.css" rel="prefetch"><link href="/css/chunk-22b81c7d.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-283605ab.aa4a19b7.css" rel="prefetch"><link href="/css/chunk-2baeec56.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-2ea98f65.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-32be0a08.3b6c8ecc.css" rel="prefetch"><link href="/css/chunk-3e87300e.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-478332d4.d1a0390b.css" rel="prefetch"><link href="/css/chunk-6b054e7d.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-735b355e.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-757c8468.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-7c0a0205.f3648fad.css" rel="prefetch"><link href="/css/chunk-7f7ebf1d.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-a3cf4dfa.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-cdf205fa.55ef1f5f.css" rel="prefetch"><link href="/css/chunk-f9a5a184.be1ac4ec.css" rel="prefetch"><link href="/css/chunk-facc3ec6.55ef1f5f.css" rel="prefetch"><link href="/js/chunk-005da1b8.082dfc56.js" rel="prefetch"><link href="/js/chunk-03c6fe76.a10c2a97.js" rel="prefetch"><link href="/js/chunk-0b146112.63d12ef7.js" rel="prefetch"><link href="/js/chunk-0c24fb4c.4ebc6cad.js" rel="prefetch"><link href="/js/chunk-0df31e4a.1ca2ca0b.js" rel="prefetch"><link href="/js/chunk-118e4d80.b6d72a4a.js" rel="prefetch"><link href="/js/chunk-11edbba2.230c8070.js" rel="prefetch"><link href="/js/chunk-12073a46.015a7054.js" rel="prefetch"><link href="/js/chunk-1397e24b.bca4a27e.js" rel="prefetch"><link href="/js/chunk-16068671.2ab91825.js" rel="prefetch"><link href="/js/chunk-19310c36.f3ab4a48.js" rel="prefetch"><link href="/js/chunk-1c9085c0.d41a6ccd.js" rel="prefetch"><link href="/js/chunk-1e2993f9.38aabbcc.js" rel="prefetch"><link href="/js/chunk-1e75ffcc.91d8dd30.js" rel="prefetch"><link href="/js/chunk-22b81c7d.21c3e6d9.js" rel="prefetch"><link href="/js/chunk-2401ef81.8f5173b4.js" rel="prefetch"><link href="/js/chunk-2594e102.b7d28958.js" rel="prefetch"><link href="/js/chunk-2736db0e.09682023.js" rel="prefetch"><link href="/js/chunk-283605ab.2636cac2.js" rel="prefetch"><link href="/js/chunk-293066ec.067b63ec.js" rel="prefetch"><link href="/js/chunk-2a65b275.56da34af.js" rel="prefetch"><link href="/js/chunk-2baeec56.d4060778.js" rel="prefetch"><link href="/js/chunk-2d0a496f.299da2a1.js" rel="prefetch"><link href="/js/chunk-2d0b2157.dc337ee5.js" rel="prefetch"><link href="/js/chunk-2d0c7cc4.f166cf4f.js" rel="prefetch"><link href="/js/chunk-2d0cedcf.f6efacf3.js" rel="prefetch"><link href="/js/chunk-2d0d43a9.aa1d5677.js" rel="prefetch"><link href="/js/chunk-2d225630.7caf3521.js" rel="prefetch"><link href="/js/chunk-2ea98f65.5dd34892.js" rel="prefetch"><link href="/js/chunk-32be0a08.c9abb3c8.js" rel="prefetch"><link href="/js/chunk-332acd96.e9e64341.js" rel="prefetch"><link href="/js/chunk-361113c6.05f80b00.js" rel="prefetch"><link href="/js/chunk-365b8e82.9b3d4282.js" rel="prefetch"><link href="/js/chunk-37063f12.eab09560.js" rel="prefetch"><link href="/js/chunk-38538748.9157b5e5.js" rel="prefetch"><link href="/js/chunk-3b2dcc34.f02cc3d7.js" rel="prefetch"><link href="/js/chunk-3e87300e.5d42efe0.js" rel="prefetch"><link href="/js/chunk-42b42766.c674b7a0.js" rel="prefetch"><link href="/js/chunk-478332d4.9961e2ef.js" rel="prefetch"><link href="/js/chunk-4a5d8b4e.9f6d8a5e.js" rel="prefetch"><link href="/js/chunk-54a56c3e.77ea0455.js" rel="prefetch"><link href="/js/chunk-572d0849.eae512d0.js" rel="prefetch"><link href="/js/chunk-57b827ec.571f5022.js" rel="prefetch"><link href="/js/chunk-5bc372f8.dac5d885.js" rel="prefetch"><link href="/js/chunk-5f93f988.bbb15365.js" rel="prefetch"><link href="/js/chunk-6070ac14.a5ae1ced.js" rel="prefetch"><link href="/js/chunk-658f3442.cee6b384.js" rel="prefetch"><link href="/js/chunk-675da618.312093cc.js" rel="prefetch"><link href="/js/chunk-68108cb0.d35e1a67.js" rel="prefetch"><link href="/js/chunk-6b054e7d.2921ca41.js" rel="prefetch"><link href="/js/chunk-72dec8c6.00e9d9a2.js" rel="prefetch"><link href="/js/chunk-735b355e.c3ad8f1b.js" rel="prefetch"><link href="/js/chunk-74a89c07.134c8439.js" rel="prefetch"><link href="/js/chunk-757c8468.9bf80aba.js" rel="prefetch"><link href="/js/chunk-783efe51.ee90cc9b.js" rel="prefetch"><link href="/js/chunk-78ec252c.f38eb794.js" rel="prefetch"><link href="/js/chunk-7901fafd.435e5d6c.js" rel="prefetch"><link href="/js/chunk-7902062d.6c5ffe76.js" rel="prefetch"><link href="/js/chunk-7c0a0205.bead91d6.js" rel="prefetch"><link href="/js/chunk-7f7ebf1d.98e00a41.js" rel="prefetch"><link href="/js/chunk-85a3df24.92d2f9ed.js" rel="prefetch"><link href="/js/chunk-8943dbd6.238a2039.js" rel="prefetch"><link href="/js/chunk-8f648710.be44031d.js" rel="prefetch"><link href="/js/chunk-92e78dce.d40f1887.js" rel="prefetch"><link href="/js/chunk-a26ac402.575812a6.js" rel="prefetch"><link href="/js/chunk-a3cf4dfa.b6cc92f4.js" rel="prefetch"><link href="/js/chunk-b7dbbcfc.0a4711f5.js" rel="prefetch"><link href="/js/chunk-bb7c6f24.09b0dbe1.js" rel="prefetch"><link href="/js/chunk-bdc6a4dc.f182409c.js" rel="prefetch"><link href="/js/chunk-cdf205fa.e4812a71.js" rel="prefetch"><link href="/js/chunk-dcee30d0.2f031c33.js" rel="prefetch"><link href="/js/chunk-e58e8564.2af936a7.js" rel="prefetch"><link href="/js/chunk-f78ee974.25ae44f5.js" rel="prefetch"><link href="/js/chunk-f9a5a184.d5bb5ff8.js" rel="prefetch"><link href="/js/chunk-facc3ec6.483b36c0.js" rel="prefetch"><link href="/js/chunk-fb8e8f30.ffe3d27e.js" rel="prefetch"><link href="/js/chunk-fce5468c.e63839ac.js" rel="prefetch"><link href="/css/app.a5f762cd.css" rel="preload" as="style"><link href="/css/chunk-vendors.89999026.css" rel="preload" as="style"><link href="/js/app.45ad3241.js" rel="preload" as="script"><link href="/js/chunk-vendors.6bf1dd9d.js" rel="preload" as="script"><link href="/css/chunk-vendors.89999026.css" rel="stylesheet"><link href="/css/app.a5f762cd.css" rel="stylesheet"><style id="plotly.js-style-global"></style><script charset="utf-8" src="/js/chunk-361113c6.05f80b00.js"></script><script charset="utf-8" src="/js/chunk-365b8e82.9b3d4282.js"></script><link rel="stylesheet" type="text/css" href="/css/chunk-1e75ffcc.486297c4.css"><script charset="utf-8" src="/js/chunk-1e75ffcc.91d8dd30.js"></script><script charset="utf-8" src="/js/chunk-0df31e4a.1ca2ca0b.js"></script><script type="text/javascript" async="" src="https://client.crisp.chat/l.js" data-loaded="true"></script><link href="https://client.relay.crisp.chat" rel="dns-prefetch" crossorigin=""><link href="https://client.crisp.chat" rel="preconnect" crossorigin=""><script src="https://client.crisp.chat/static/javascripts/client.js?43022c0" type="text/javascript" async=""></script><link href="https://client.crisp.chat/static/stylesheets/client_default.css?43022c0" type="text/css" rel="stylesheet"><link data-vue-meta="1" rel="canonical" href="https://www.practical-go-lessons.com/chap-1-programming-a-computer"><meta data-vue-meta="1" charset="utf-8"><meta data-vue-meta="1" name="description" content="Your programs will run on hardware. Knowing how your hardware is working may improve the design of your programs. Firstly we will describe the main components of a computer. Then we will see what a program is and how the machine handles it."><meta data-vue-meta="1" name="robots" content="index, follow"><meta data-vue-meta="1" property="og:locale" content="en_US"><meta data-vue-meta="1" property="og:type" content="website"><meta data-vue-meta="1" property="og:title" content="Programming A Computer - Practical Go Lessons"><meta data-vue-meta="1" property="og:description" content="Your programs will run on hardware. Knowing how your hardware is working may improve the design of your programs. Firstly we will describe the main components of a computer. Then we will see what a program is and how the machine handles it."><meta data-vue-meta="1" property="og:url" content="https://www.practical-go-lessons.com/chap-1-programming-a-computer"><meta data-vue-meta="1" property="og:site_name" content="Practical Go Lessons"><meta data-vue-meta="1" property="twitter:card" content="summary_large_image"><meta data-vue-meta="1" property="twitter:creator" content="@MaximilienAld"></head><body><noscript><strong>We're sorry but Practical Go Lessons doesn't work properly without JavaScript enabled. Please enable it to continue.</strong></noscript><div><div data-v-edfe07a4=""><nav data-v-8d6bcf4e="" data-v-edfe07a4="" class="navbar navbar-expand-lg navbar-light " style="background-color: rgb(227, 242, 253);"><a data-v-8d6bcf4e="" href="/" class="navbar-brand">Practical Go Lessons</a><div data-v-8d6bcf4e="" id="navbarText" class="collapse navbar-collapse"><ul data-v-8d6bcf4e="" class="navbar-nav mr-auto"><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Buy</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Feedback</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Subscribe</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Video Tutorial</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Products</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">My Courses</a></li></ul></div><div data-v-8d6bcf4e="" id="navbarRight"><ul data-v-8d6bcf4e="" class="navbar-nav mr-auto"><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Cart</a></li><li data-v-8d6bcf4e="" class="nav-item active"><a data-v-8d6bcf4e="" href="#" class="nav-link">Login</a></li><!----></ul></div><button data-v-8d6bcf4e="" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler"><span data-v-8d6bcf4e="" class="navbar-toggler-icon"></span></button></nav><div data-v-edfe07a4="" class="container-fluid"><div data-v-edfe07a4="" class="row"><nav data-v-22c8b9a2="" data-v-edfe07a4="" class="col-md-2 margin-top100  d-none d-md-block bg-light sidebar "><div data-v-22c8b9a2="" class="anchor"></div><div data-v-22c8b9a2="" class="sidebar-sticky"><ul data-v-22c8b9a2="" class="nav flex-column"><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-1-programming-a-computer" aria-current="page" class=" ml-1 nav-link router-link-exact-active router-link-active active" target="_self">Chap. 1: Programming A Computer</a><ul data-v-22c8b9a2="" class="list-unstyled mt-2 ml-2"><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#what-will-you-learn-in-this-chapter" class="chap-section-link ml-3 ">What will you learn in this chapter?</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#technical-concepts-covered" class="chap-section-link ml-3 ">Technical concepts covered</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#introduction" class="chap-section-link ml-3 ">Introduction</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#the-four-hardware-components" class="chap-section-link ml-3 ">The four hardware components</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#memory" class="chap-section-link ml-3 ">Memory</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#cpu" class="chap-section-link ml-3 ">CPU</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#what-is-a-program" class="chap-section-link ml-3 ">What is a program?</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#how-to-speak-to-the-machine" class="chap-section-link ml-3 ">How to speak to the machine?</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#test-yourself" class="chap-section-link ml-3 ">Test yourself</a></li><li data-v-22c8b9a2=""><a data-v-22c8b9a2="" href="#key-takeaways" class="chap-section-link ml-3 ">Key takeaways</a></li></ul></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-2-the-go-language" class=" ml-1 nav-link" target="_self">Chap. 2: The Go Language</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-3-the-terminal" class=" ml-1 nav-link" target="_self">Chap. 3: The terminal</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-4-setup-your-dev-environment" class=" ml-1 nav-link" target="_self">Chap. 4: Setup your dev environment</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-5-first-go-application" class=" ml-1 nav-link" target="_self">Chap. 5: First Go Application</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-6-binary-and-decimal" class=" ml-1 nav-link" target="_self">Chap. 6: Binary and Decimal</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-7-hexadecimal-octal-ascii-utf8-unicode-runes" class=" ml-1 nav-link" target="_self">Chap. 7: Hexadecimal, octal, ASCII, UTF8, Unicode, Runes</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-8-variables-constants-and-basic-types" class=" ml-1 nav-link" target="_self">Chap. 8: Variables, constants and basic types</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-9-control-statements" class=" ml-1 nav-link" target="_self">Chap. 9: Control Statements</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-10-functions" class=" ml-1 nav-link" target="_self">Chap. 10: Functions</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-11-packages-and-imports" class=" ml-1 nav-link" target="_self">Chap. 11: Packages and imports</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-12-package-initialization" class=" ml-1 nav-link" target="_self">Chap. 12: Package Initialization</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-13-types" class=" ml-1 nav-link" target="_self">Chap. 13: Types</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-14-methods" class=" ml-1 nav-link" target="_self">Chap. 14: Methods</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-15-pointer-type" class=" ml-1 nav-link" target="_self">Chap. 15: Pointer type</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-16-interfaces" class=" ml-1 nav-link" target="_self">Chap. 16: Interfaces</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-17-go-modules" class=" ml-1 nav-link" target="_self">Chap. 17: Go modules</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-18-go-module-proxies" class=" ml-1 nav-link" target="_self">Chap. 18: Go Module Proxies</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-19-unit-tests" class=" ml-1 nav-link" target="_self">Chap. 19: Unit Tests</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-20-arrays" class=" ml-1 nav-link" target="_self">Chap. 20: Arrays</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-21-slices" class=" ml-1 nav-link" target="_self">Chap. 21: Slices</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-22-maps" class=" ml-1 nav-link" target="_self">Chap. 22: Maps</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-23-errors" class=" ml-1 nav-link" target="_self">Chap. 23: Errors</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-24-anonymous-functions-and-closures" class=" ml-1 nav-link" target="_self">Chap. 24: Anonymous functions &amp; closures</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-25-json-and-xml" class=" ml-1 nav-link" target="_self">Chap. 25: JSON and XML</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-26-basic-http-server" class=" ml-1 nav-link" target="_self">Chap. 26: Basic HTTP Server</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-27-enum-iota-and-bitmask" class=" ml-1 nav-link" target="_self">Chap. 27: Enum, Iota &amp; Bitmask</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-28-dates-and-time" class=" ml-1 nav-link" target="_self">Chap. 28: Dates and time</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-29-data-storage-files-and-databases" class=" ml-1 nav-link" target="_self">Chap. 29: Data storage : files and databases</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-30-concurrency" class=" ml-1 nav-link" target="_self">Chap. 30: Concurrency</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-31-logging" class=" ml-1 nav-link" target="_self">Chap. 31: Logging</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-32-templates" class=" ml-1 nav-link" target="_self">Chap. 32: Templates</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-33-application-configuration" class=" ml-1 nav-link" target="_self">Chap. 33: Application Configuration</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-34-benchmarks" class=" ml-1 nav-link" target="_self">Chap. 34: Benchmarks</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-35-build-an-http-client" class=" ml-1 nav-link" target="_self">Chap. 35: Build an HTTP Client</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-36-program-profiling" class=" ml-1 nav-link" target="_self">Chap. 36: Program Profiling</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-37-context" class=" ml-1 nav-link" target="_self">Chap. 37: Context</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-38-generics" class=" ml-1 nav-link" target="_self">Chap. 38: Generics</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-39-an-object-oriented-programming-language" class=" ml-1 nav-link" target="_self">Chap. 39: An object oriented programming language ?</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-40-upgrading-or-downgrading-go" class=" ml-1 nav-link" target="_self">Chap. 40: Upgrading or Downgrading Go</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-41-design-recommendations" class=" ml-1 nav-link" target="_self">Chap. 41: Design Recommendations</a><!----></li><li data-v-22c8b9a2="" class="nav-item"><a data-v-22c8b9a2="" href="/chap-42-cheatsheet" class=" ml-1 nav-link" target="_self">Chap. 42: Cheatsheet</a><!----></li></ul></div></nav><div data-v-edfe07a4="" class="col"></div><div data-v-edfe07a4="" role="main" class="col-md-6"><div data-v-0d86288c="" data-v-edfe07a4=""><div data-v-0d86288c="" class="row mt-2"><div data-v-0d86288c="" class="col-md-1"><!----><a data-v-0d86288c="" id="tooltip-target-1" href="#" target="_self" class=""><svg data-v-d5d4b5e6="" data-v-0d86288c="" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" enable-background="new 0 0 48 48" style="width: 40px;"><g data-v-d5d4b5e6="" fill="#2196F3"><rect data-v-d5d4b5e6="" x="6" y="22" width="4" height="4"></rect><rect data-v-d5d4b5e6="" x="6" y="14" width="4" height="4"></rect><rect data-v-d5d4b5e6="" x="6" y="30" width="4" height="4"></rect><rect data-v-d5d4b5e6="" x="6" y="6" width="4" height="4"></rect><rect data-v-d5d4b5e6="" x="6" y="38" width="4" height="4"></rect></g><g data-v-d5d4b5e6="" fill="#2196F3"><rect data-v-d5d4b5e6="" x="14" y="22" width="28" height="4"></rect><rect data-v-d5d4b5e6="" x="14" y="14" width="28" height="4"></rect><rect data-v-d5d4b5e6="" x="14" y="30" width="28" height="4"></rect><rect data-v-d5d4b5e6="" x="14" y="6" width="28" height="4"></rect><rect data-v-d5d4b5e6="" x="14" y="38" width="28" height="4"></rect></g></svg></a></div><div data-v-0d86288c="" class="col"><h1 data-v-0d86288c="" class="chapter-title">Chapter 1: Programming A Computer</h1></div></div><br data-v-0d86288c=""><img data-v-0d86288c="" src="/img/1-programming.2b932230.jpg" alt="Programming A Computer" class="img-chapter img-thumbnail"><hr data-v-0d86288c=""><br data-v-0d86288c=""></div><div data-v-edfe07a4="" id="what-will-you-learn-in-this-chapter" class="anchor"></div><h1 data-v-edfe07a4="" data-number="1"><span data-v-edfe07a4="" class="header-section-number">1</span> What will you learn in this chapter? <a data-v-edfe07a4="" href="#what-will-you-learn-in-this-chapter"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">We will list the different hardware parts of a computer.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">We will see what a program is and how it looks like.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">We will understand how a program is loaded and executed.</p></li></ul><div data-v-edfe07a4="" id="technical-concepts-covered" class="anchor"></div><h1 data-v-edfe07a4="" data-number="2"><span data-v-edfe07a4="" class="header-section-number">2</span> Technical concepts covered <a data-v-edfe07a4="" href="#technical-concepts-covered"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">Memory Unit, Arithmetic and Logic Unit, Input/Output, Control Unit</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Central memory, Auxiliary memory</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Volatile and non-volatile memory</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">RAM/ROM</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">CPU</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">High and low-level languages</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Assembly language, assembler</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Compiled and interpreted language</p></li></ul><div data-v-edfe07a4="" id="introduction" class="anchor"></div><h1 data-v-edfe07a4="" data-number="3"><span data-v-edfe07a4="" class="header-section-number">3</span> Introduction <a data-v-edfe07a4="" href="#introduction"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><p data-v-edfe07a4="">This book is about Go. Before jumping into our main subject, you need to know some basic knowledge about computers.</p><p data-v-edfe07a4="">Experienced programmers can skip this chapter. Beginners should take some time to study it.</p><p data-v-edfe07a4="">Your programs will run on hardware. Knowing how your hardware is working may improve the design of your programs.</p><p data-v-edfe07a4="">Firstly we will describe the main components of a computer. Then we will see what a program is and how the machine handles it.</p><div data-v-edfe07a4="" id="the-four-hardware-components" class="anchor"></div><div data-v-e0523da4="" data-v-edfe07a4="" role="alert" aria-live="polite" aria-atomic="true" class="alert alert-dismissible alert-info"><button type="button" aria-label="Close" class="close">×</button> The <strong data-v-e0523da4="">paper</strong> and the <strong data-v-e0523da4="">digital</strong> edition of this book are available <a data-v-e0523da4="" href="/buy-digital-or-hard-copy" class="" target="_self">here.</a><br data-v-e0523da4="">I also filmed a <a data-v-e0523da4="" href="/tutorial/build-ecommerce-website-golang-vuejs-gin-aws-lambda-a6f0e242-0cbf-4623-86f3-fbe57e10d80a" class="" target="_self"><strong data-v-e0523da4="">video course</strong></a> to build a real world project with Go. </div><h1 data-v-edfe07a4="" data-number="4"><span data-v-edfe07a4="" class="header-section-number">4</span> The four hardware components <a data-v-edfe07a4="" href="#the-four-hardware-components"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><p data-v-edfe07a4="">A computer is composed of <strong data-v-edfe07a4="">four</strong> main parts :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">The memory unit (MU)</strong> where data and programs are stored.</p><ul data-v-edfe07a4=""><li data-v-edfe07a4="">For instance, we can store into the memory unit the grades of a college class. We can also hold a program that will compute the class’s average grade.</li></ul></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The <strong data-v-edfe07a4="">arithmetic and logic unit (ALU)</strong>. Its role is to perform arithmetic and logical operations on data stored into the memory unit. This unit can perform, for instance, additions, incrementations, decrementations, which are called <strong data-v-edfe07a4="">operations</strong>. In general, each operation requires two operands and output a result.</p><ul data-v-edfe07a4=""><li data-v-edfe07a4="">Let’s say we want to add 5 and 4. Those two numbers are the operands. The result of this operation is 9. Operands are loaded from the memory unit. The ALU is an electrical circuitry that is designed to execute operations.</li></ul></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The <strong data-v-edfe07a4="">input and output unit (I/OU)</strong> will be in charge of loading data into the memory unit from an <strong data-v-edfe07a4="">input</strong> device. This unit also sends data from the memory unit to an <strong data-v-edfe07a4="">output</strong> device.</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">An input device is, for example, the touchpad of your computer, your keyboard, your mouse.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">An output device is, for instance, your monitor.</p></li></ul></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The <strong data-v-edfe07a4="">control unit (CU)</strong> will receive instructions from programs and will control the activity of the other units.</p></li></ul><p data-v-edfe07a4="">The four hardware components represent a <strong data-v-edfe07a4="">schematic view</strong> of the computer’s components.</p><div data-v-edfe07a4="" id="memory" class="anchor"></div><h1 data-v-edfe07a4="" data-number="5"><span data-v-edfe07a4="" class="header-section-number">5</span> Memory <a data-v-edfe07a4="" href="#memory"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><p data-v-edfe07a4="">A computer is composed of two types of memory :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">The central memory</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The auxiliary memory</p></li></ul><p data-v-edfe07a4="">Two categories of memory exist:</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">Volatile</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Non Volatile</p></li></ul><div data-v-edfe07a4="" id="the-central-memory" class="anchor"></div><h2 data-v-edfe07a4="" data-number="5.1"><span data-v-edfe07a4="" class="header-section-number">5.1</span> The central memory <a data-v-edfe07a4="" href="#the-central-memory"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">This type of memory is necessary to run the operating systems and all the other programs your computer will run. The central memory contains two types of storage :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">RAM</strong> (Random Access Memory). This type of storage requires electric power to persist data. When you turn your computer off, the memory contained in this type of storage will be erased. The operating system and the programs you use will be loaded into this memory. This type of memory is <strong data-v-edfe07a4="">volatile</strong>.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">ROM</strong> (Read-Only Memory). This is a memory that contains data necessary for the computer to run correctly. This kind of memory is <strong data-v-edfe07a4="">not volatile</strong> (when you turn the computer off, it will not be erased). It’s designed to be only readable and not updated by the system.</p></li></ul><div data-v-edfe07a4="" id="the-auxiliary-memory" class="anchor"></div><h2 data-v-edfe07a4="" data-number="5.2"><span data-v-edfe07a4="" class="header-section-number">5.2</span> The auxiliary memory <a data-v-edfe07a4="" href="#the-auxiliary-memory"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">This type of memory is not volatile. When the power is going off, the data stored will not be erased. Here are some examples of auxiliary memory: Hard drives, USB keys, CD-ROM, DVD ...etc.</p><p data-v-edfe07a4="">Read and writes to this type of memory is <strong data-v-edfe07a4="">slow</strong> compared to the RAM.</p><p data-v-edfe07a4="">Some hard drives sequentially access memory. The system should respect a particular sequence. Respecting this access sequence takes a longer time than a random access mode. Note that some hard drives allow random memory access.</p><div data-v-edfe07a4="" id="ssd-hard-drive" class="anchor"></div><h3 data-v-edfe07a4="" data-number="5.2.1"><span data-v-edfe07a4="" class="header-section-number">5.2.1</span> SSD hard drive <a data-v-edfe07a4="" href="#ssd-hard-drive"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h3><p data-v-edfe07a4="">Hard drives, also denoted Hard Disk Drive (HDD), are composed of magnetic disks that are rotating. Data are read and write thanks to a moving magnetic head. Reads and writes will generate a rotation and a magnetic head movement, which consumes time.</p><p data-v-edfe07a4="">SSD (Solid-State Drives) are not constructed like that. There is no magnetic head neither magnetic disks. Instead, data is stored in flash memory cells. Data access is quicker on that kind of disk. Note that SSD also costs more than traditional electromagnetic hard drives.</p><div data-v-edfe07a4="" id="cpu" class="anchor"></div><h1 data-v-edfe07a4="" data-number="6"><span data-v-edfe07a4="" class="header-section-number">6</span> CPU <a data-v-edfe07a4="" href="#cpu"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><p data-v-edfe07a4="">CPU is the initials of <strong data-v-edfe07a4="">Central Processing Unit</strong>. The CPU is also denoted <strong data-v-edfe07a4="">processor</strong>. The CPU contains :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">The <strong data-v-edfe07a4="">arithmetic and logic unit (ALU)</strong></p></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">The control unit (CU)</strong></p></li></ul><p data-v-edfe07a4="">The CPU will be responsible for executing the instructions given by a program. For instance, the program can instruct to perform an addition between two numbers. Those numbers will be retrieved from the memory unit and passed to the ALU. The program might also require performing an I/O operation like reading data from the hard drive and loading it into the RAM for further processing. The CPU will execute those instructions.</p><p data-v-edfe07a4="">The CPU is the central component of a computer.</p><div data-v-edfe07a4="" id="what-is-a-program" class="anchor"></div><h1 data-v-edfe07a4="" data-number="7"><span data-v-edfe07a4="" class="header-section-number">7</span> What is a program? <a data-v-edfe07a4="" href="#what-is-a-program"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><p data-v-edfe07a4="">To make computers do something, we have to feed them with precise instructions. This set of instructions is called “program”.</p><p data-v-edfe07a4="">Following a more official definition, a program is “a combination of computer instructions and data definitions that enable computer hardware to compute”<a data-v-edfe07a4="" data-cites="institute1990ieee" href="#institute1990ieee" target="_self" class="citation">[@institute1990ieee]</a>.</p><p data-v-edfe07a4="">Let’s take an example. Imagine a program that asks the user to type two numbers. The program adds those numbers, and the result is then displayed on the monitor. The instructions that have to be written are :</p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4=""><p data-v-edfe07a4="">Output “Please type your first number and press enter” on the monitor.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">When a number is typed and the “Enter” key is pressed on the keyboard, store the number into memory. Let’s denote <span data-v-edfe07a4="" class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathnormal">A</span></span></span></span></span> this number.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Output “Please type your second number and press enter” on the monitor.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">When a number is typed and the “Enter” key is pressed on the keyboard, store the number into memory. Let’s denote <span data-v-edfe07a4="" class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span style="margin-right: 0.05017em;" class="mord mathnormal">B</span></span></span></span></span> this number.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Send to the ALU the two numbers (<span data-v-edfe07a4="" class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathnormal">A</span></span></span></span></span> and <span data-v-edfe07a4="" class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span style="margin-right: 0.05017em;" class="mord mathnormal">B</span></span></span></span></span>) and the addition opcode and store the result into memory.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Output the result on the monitor</p></li></ol><p data-v-edfe07a4="">Two types of instructions are performed :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">I/O operations</strong> : retrieve numbers stored into memory, store numbers into memory from an the input device (the keyboard), load data from memory, and display it to the user.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">An arithmetic operation</strong> : add two numbers.</p></li></ul><p data-v-edfe07a4="">We have here a set of instructions that are written in plain English. The machine does not understand English sentences. Those sentences need to be translated to a language that the machine understands. What is this language?</p><div data-v-edfe07a4="" id="how-to-speak-to-the-machine" class="anchor"></div><div data-v-e0523da4="" data-v-edfe07a4="" role="alert" aria-live="polite" aria-atomic="true" class="alert alert-dismissible alert-info"><button type="button" aria-label="Close" class="close">×</button> The <strong data-v-e0523da4="">paper</strong> and the <strong data-v-e0523da4="">digital</strong> edition of this book are available <a data-v-e0523da4="" href="/buy-digital-or-hard-copy" class="" target="_self">here.</a><br data-v-e0523da4="">I also filmed a <a data-v-e0523da4="" href="/tutorial/build-ecommerce-website-golang-vuejs-gin-aws-lambda-a6f0e242-0cbf-4623-86f3-fbe57e10d80a" class="" target="_self"><strong data-v-e0523da4="">video course</strong></a> to build a real world project with Go. </div><h1 data-v-edfe07a4="" data-number="8"><span data-v-edfe07a4="" class="header-section-number">8</span> How to speak to the machine? <a data-v-edfe07a4="" href="#how-to-speak-to-the-machine"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><div data-v-edfe07a4="" id="programming-languages-are-formal-languages" class="anchor"></div><h2 data-v-edfe07a4="" data-number="8.1"><span data-v-edfe07a4="" class="header-section-number">8.1</span> Programming languages are formal languages <a data-v-edfe07a4="" href="#programming-languages-are-formal-languages"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">Instructions that are given to the machine are written with programming languages. Programming languages are <strong data-v-edfe07a4="">formal languages.</strong>They are composed of words that are constructed from an alphabet (a set of distinct characters). Those words are organized following specific <strong data-v-edfe07a4="">rules</strong>. Go is a programming language, like x86 Assembly, Java, C, C++, Javascript...</p><p data-v-edfe07a4="">They are two types of programming languages :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">Low level</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">High level</p></li></ul><p data-v-edfe07a4="">Low-level programming languages are closer to the processing unit’s instructions. Higher-level languages provide constructs that make them easier to learn and to use on a day-to-day basis.</p><p data-v-edfe07a4="">Some high-level languages are compiled, others are interpreted, and some are in between. We will see in the next sections what those two terms mean.</p><figure data-v-edfe07a4=""><img data-v-edfe07a4="" src="/img/programming_languages_lowHighCompInterp.41e11926.png" alt="Programming languages classification" class="img-book img-thumbnail img-fluid"><figcaption data-v-edfe07a4="" aria-hidden="true">Programming languages classification</figcaption></figure><div data-v-edfe07a4="" id="machine-language" class="anchor"></div><h2 data-v-edfe07a4="" data-number="8.2"><span data-v-edfe07a4="" class="header-section-number">8.2</span> Machine language <a data-v-edfe07a4="" href="#machine-language"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">To speak to the processing unit of a computer, we can use a <strong data-v-edfe07a4="">machine language</strong>. Machine languages are composed exclusively of zeros and ones. An instruction written in a machine language is a suite of 0 and 1. Each processor (or family of processors) will define a list of instructions called the <strong data-v-edfe07a4="">instruction set</strong>. There is an instruction to add to the number, increment by one, decrement by one, copy data from one location in memory to another place...etc.</p><p data-v-edfe07a4="">It’s possible to write computer programs directly into machine language. However, this is not easy.</p><div data-v-edfe07a4="" id="assembly-language" class="anchor"></div><h2 data-v-edfe07a4="" data-number="8.3"><span data-v-edfe07a4="" class="header-section-number">8.3</span> Assembly language <a data-v-edfe07a4="" href="#assembly-language"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">The assembly language is a <strong data-v-edfe07a4="">low-level programming language</strong>. The instructions of a program written in an assembly language correspond to machine instructions. Assembly languages use mnemonics which are small words that will correspond to a machine instruction. For instance <span data-v-edfe07a4="" class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>O</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">MOV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span style="margin-right: 0.02778em;" class="mord mathnormal">MO</span><span style="margin-right: 0.22222em;" class="mord mathnormal">V</span></span></span></span></span> Will instruct the machine to move data from one location to another location. Developers can also comment the code (which is not possible with machine language).</p><p data-v-edfe07a4="">To create a program in assembly language, the developer will write instruction to one or several files. Those files are named <strong data-v-edfe07a4="">source files</strong>.</p><p data-v-edfe07a4="">Here is an example of an instruction written in x86 Linux assembly :</p><pre data-v-edfe07a4=""><code data-v-edfe07a4="" class="go hljs"><span class="hljs-comment">// assembly code</span>
mov    eax,<span class="hljs-number">1</span>
<span class="hljs-keyword">int</span>    <span class="hljs-number">0x80</span></code></pre><p data-v-edfe07a4="">Those two lines will perform a system call that will close the program (the “1” represent the system call number that means “exit the program”). Note that assembly language is different from machine to machine. We say that it’s <strong data-v-edfe07a4="">machine-specific</strong>.</p><p data-v-edfe07a4="">An <strong data-v-edfe07a4="">assembler</strong> is used to convert the source files written in an assembly language to object code files. We say that we <strong data-v-edfe07a4="">assemble</strong> the program. The linker will then transform those object code files into an executable file. An executable file contains all the computer’s necessary instructions to launch the program.</p><figure data-v-edfe07a4=""><img data-v-edfe07a4="" src="/img/assembly_to_executable.926437cf.png" alt="From assembly code to an executable" class="img-book img-thumbnail img-fluid"><figcaption data-v-edfe07a4="" aria-hidden="true">From assembly code to an executable</figcaption></figure><div data-v-edfe07a4="" id="high-level-languages" class="anchor"></div><h2 data-v-edfe07a4="" data-number="8.4"><span data-v-edfe07a4="" class="header-section-number">8.4</span> High-level languages <a data-v-edfe07a4="" href="#high-level-languages"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><p data-v-edfe07a4="">There are plenty of high-level languages on the market, like Go. Those languages are not closely bound to machine architecture. They offer a convenient way to write instructions. For instance, if we want to make a system call to exit our program, we can write in go :</p><pre data-v-edfe07a4=""><code data-v-edfe07a4="" class="go hljs">os.Exit(<span class="hljs-number">1</span>)</code></pre><p data-v-edfe07a4="">With the C language, we can write :</p><pre data-v-edfe07a4=""><code data-v-edfe07a4="" class="go hljs"><span class="hljs-comment">// C Code</span>
exit(<span class="hljs-number">1</span>)</code></pre><p data-v-edfe07a4="">With Java, we can write :</p><pre data-v-edfe07a4=""><code data-v-edfe07a4="" class="go hljs"><span class="hljs-comment">// Java Code</span>
System.exit(<span class="hljs-number">1</span>);</code></pre><p data-v-edfe07a4="">In this example, we do not have to move a number into a register; we use the languages constructs (functions, packages, methods, variables, types ...). The objective of this book is to give you precise and concise definitions of those tools to build Go applications.</p><p data-v-edfe07a4="">High-level programs are also written to files. Files are named “source files”. Generally, programming languages require adding a specific extension to the filename. For Go programs we will add “.go” At the end of each file that we will write. In PHP the extension is “.php”.</p><p data-v-edfe07a4="">When source files are written, the program that they define cannot be executed immediately. The source file needs to be <strong data-v-edfe07a4="">compiled</strong> by using a <strong data-v-edfe07a4="">compiler</strong>. The compiler will transform source files into an executable. The compiler is also a program. Go is part of the compiled language family.</p><figure data-v-edfe07a4=""><img data-v-edfe07a4="" src="/img/compiler.adc1a3b1.png" alt="Go is a compiled language" class="img-book img-thumbnail img-fluid"><figcaption data-v-edfe07a4="" aria-hidden="true">Go is a compiled language</figcaption></figure><div data-v-edfe07a4="" id="compiled-vs.-interpreted" class="anchor"></div><h3 data-v-edfe07a4="" data-number="8.4.1"><span data-v-edfe07a4="" class="header-section-number">8.4.1</span> Compiled vs.&nbsp;Interpreted <a data-v-edfe07a4="" href="#compiled-vs.-interpreted"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h3><p data-v-edfe07a4="">Note that some programming languages are interpreted. When the source files have been written, the programmer does not need to compile the sources. With the source files ready, the system can execute the program thanks to an interpreter. Each instruction written into the source file is translated and executed by the interpreter. In some cases, interpreters are storing in a cache a compiled version of the program to boost performance (the source files are not translated each time). PHP, Python, Ruby, Perl are interpreted languages.</p><div data-v-edfe07a4="" id="test-yourself" class="anchor"></div><h1 data-v-edfe07a4="" data-number="9"><span data-v-edfe07a4="" class="header-section-number">9</span> Test yourself <a data-v-edfe07a4="" href="#test-yourself"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><div data-v-edfe07a4="" id="questions" class="anchor"></div><h2 data-v-edfe07a4="" data-number="9.1"><span data-v-edfe07a4="" class="header-section-number">9.1</span> Questions <a data-v-edfe07a4="" href="#questions"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4=""><p data-v-edfe07a4="">Where are programs stored?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Reading data from a hard drive is slower than reading data from RAM. True or false?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Can you write into the ROM? True or false?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">What are the two types of memory?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">What is the definition of “volatile memory”?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Which program transforms code written assembly language into object code?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Which program transforms object code into an executable file?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Give two advantages of high-level languages compared to low-level languages?</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Go is an interpreted language? True or false?</p></li></ol><div data-v-edfe07a4="" id="answers" class="anchor"></div><h2 data-v-edfe07a4="" data-number="9.2"><span data-v-edfe07a4="" class="header-section-number">9.2</span> Answers <a data-v-edfe07a4="" href="#answers"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h2><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Where are programs stored?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">Into the memory unit (MU)</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Reading data from a hard drive is slower than reading data from RAM. True or false?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">True. Fetching and writing data to the RAM is blazing fast, whereas accessing data stored into hard drives generally takes longer.</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">A computer user can write ROM? True or false?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">False. This type of memory can only be read. It is used to store the OS (Operating system)</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">What are the two types of memory?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4=""><p data-v-edfe07a4="">The central memory</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The auxiliary memory</p></li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">What is the definition of “volatile memory” ?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">Volatile memory will be erased when the computer is switched off.</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Which program transforms code written assembly language into object code?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">The assembler will take as input assembly language code and generate machine code.</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Which program transforms object code into an executable file?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">The linker</li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Give two advantages of high-level languages compared to low-level languages?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4=""><p data-v-edfe07a4="">They offer high-level constructs that are easier to use.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">The code will not be specific to the technical architecture of a machine. We say that the code is portable.</p></li></ol></li><li data-v-edfe07a4=""><p data-v-edfe07a4=""><strong data-v-edfe07a4="">Go is an interpreted language? True or false?</strong></p><ol data-v-edfe07a4="" type="1"><li data-v-edfe07a4="">False: Go is a compiled language</li></ol></li></ol><div data-v-edfe07a4="" id="key-takeaways" class="anchor"></div><h1 data-v-edfe07a4="" data-number="10"><span data-v-edfe07a4="" class="header-section-number">10</span> Key takeaways <a data-v-edfe07a4="" href="#key-takeaways"><svg data-v-edfe07a4="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="link45deg" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-link45deg heading-link-icon b-icon bi" style="font-size: 70%;"><g data-v-edfe07a4=""><path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"></path><path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"></path></g></svg></a></h1><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">At the macro-level, a computer is composed of :</p><ul data-v-edfe07a4=""><li data-v-edfe07a4=""><p data-v-edfe07a4="">A memory unit (MU): to store data and programs</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">An Arithmetic and Logical Unit (ALU): to perform computation</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">An Input and Output Unit (IOU): to manage input devices and output devices.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">A Control Unit (CU) will manage the MU, ALU, and IOU following the instruction given by the program executed</p></li></ul></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">CPU means Central Processing Unit (also called processor or microprocessor) is composed of the ALU and CU.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">A program is a set of instructions.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Developers write programs with a programming language.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Programming languages are composed of words and characters that must be ordered following specified rules.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">They are high and low-level programming languages.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Machine language and assembly language are low-level. The instructions written in those languages are closely linked to the hardware organization and capabilities. They provide little abstractions.</p></li><li data-v-edfe07a4=""><p data-v-edfe07a4="">Go is a high-level programming language that is compiled.</p></li></ul><h1 data-v-edfe07a4="">Bibliography</h1><ul data-v-647a443a="" data-v-edfe07a4=""><li data-v-647a443a="" id="institute1990ieee">[institute1990ieee] Electrical, Institute of, and Electronics Engineers. 1990. “IEEE Standard Glossary of Software Engineering Terminology: Approved September 28, 1990, IEEE Standards Board.” In. Inst. of Electrical; Electronics Engineers.</li></ul><div data-v-edfe07a4="" class="row ml-1 mr-1"><div data-v-edfe07a4="" class="text-center border mr-1 p-2 col"><a data-v-edfe07a4="" href="/foreword" class=""><p data-v-edfe07a4=""><u data-v-edfe07a4=""><small data-v-edfe07a4="">Previous</small></u></p><p data-v-edfe07a4=""><small data-v-edfe07a4="">Foreword</small></p></a></div><div data-v-edfe07a4="" class="text-center border p-1 col"><a data-v-edfe07a4="" href="/chap-2-the-go-language" class=""><p data-v-edfe07a4=""><u data-v-edfe07a4=""><small data-v-edfe07a4="">Next</small></u></p><p data-v-edfe07a4=""><small data-v-edfe07a4="">The Go Language</small></p></a></div></div><div data-v-edfe07a4="" class="row mt-1 ml-1 mr-1"><div data-v-edfe07a4="" class="text-center border p-1 col"><a data-v-edfe07a4="" href="/" class="router-link-active" target="_self">Table of contents</a></div></div><div data-v-fb823b0a="" data-v-edfe07a4="" role="alert" aria-live="polite" aria-atomic="true" class="alert mt-2 alert-dismissible alert-success"><button type="button" aria-label="Close" class="close">×</button> Did you spot an error ? Want to give me feedback ? Here is <a data-v-fb823b0a="" href="/feedback" class="" target="_self">the feedback page</a>! </div><div data-v-ae455984="" data-v-edfe07a4="" class="mt-5"><h2 data-v-ae455984="" class="bap-title">Newsletter:</h2><p data-v-ae455984="">Like what you read ? Subscribe to the newsletter.</p><p data-v-ae455984="">I will keep you informed about the book updates.</p><label data-v-ae455984="" class="sr-only">Email:</label><div data-v-ae455984="" class="row"><div data-v-ae455984="" class="col-md-6"><form data-v-ae455984="" class=""><div data-v-ae455984="" role="group" class="input-group mb-2 mr-sm-2 mb-sm-0"><div data-v-ae455984="" class="input-group-prepend"><div data-v-ae455984="" class="input-group-text">@</div></div><input data-v-ae455984="" id="inline-form-input-username" name="email" type="email" placeholder="my@email.com" required="required" aria-required="true" class="form-control"><button data-v-ae455984="" type="submit" class="btn btn-primary"><svg data-v-ae455984="" viewBox="0 0 16 16" width="1em" height="1em" focusable="false" role="img" aria-label="check2 circle" xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi-check2-circle b-icon bi"><g data-v-ae455984=""><path d="M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z"></path><path d="M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z"></path></g></svg></button><!----></div></form></div></div></div><div data-v-78e4b6c6="" data-v-edfe07a4="" class="container"><br data-v-78e4b6c6=""><br data-v-78e4b6c6=""><footer data-v-78e4b6c6="" class="pt-4 my-md-5 pt-md-5 border-top bap-title"><div data-v-78e4b6c6="" class="row"><div data-v-78e4b6c6="" class="col-12 col-md"><small data-v-78e4b6c6="" class="d-block text-muted bap-title"><span data-v-78e4b6c6="" class="bap-title">Practical Go Lessons</span></small><small data-v-78e4b6c6="" class="d-block text-muted bap-title"><span data-v-78e4b6c6="" class="bap-title">By Maximilien Andile</span></small><small data-v-78e4b6c6="" class="d-block text-muted bap-title"><span data-v-78e4b6c6="" class="bap-title">Copyright (c) 2025</span></small></div><div data-v-78e4b6c6="" class="col-6 col-md"><h6 data-v-78e4b6c6="">Follow me</h6><ul data-v-78e4b6c6="" class="list-unstyled text-small"><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="https://twitter.com/MaximilienAld" rel="noopener" target="_blank" class=""><svg data-v-080f5d7f="" data-v-78e4b6c6="" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="25px"><title data-v-080f5d7f="">Twitter icon</title><path data-v-080f5d7f="" d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"></path></svg></a><a data-v-78e4b6c6="" href="https://www.linkedin.com/in/maximilienandile/" rel="noopener" target="_blank" class="ml-2"><svg data-v-60d7204a="" data-v-78e4b6c6="" role="img" viewBox="0 0 24 24" width="25px" xmlns="http://www.w3.org/2000/svg"><title data-v-60d7204a="">LinkedIn icon</title><path data-v-60d7204a="" d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path></svg></a></li></ul><h6 data-v-78e4b6c6="">Support the author</h6><form data-v-78e4b6c6="" action="https://www.paypal.com/donate" method="post" target="_top"><input data-v-78e4b6c6="" type="hidden" name="hosted_button_id" value="SJVCKHV9FAY8Y"><input data-v-78e4b6c6="" type="image" src="https://www.paypalobjects.com/en_US/FR/i/btn/btn_donateCC_LG.gif" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button"></form></div><div data-v-78e4b6c6="" class="col-6 col-md"><h6 data-v-78e4b6c6="">Contents</h6><ul data-v-78e4b6c6="" class="list-unstyled text-small"><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/posts" class="text-muted footer-links" target="_self"> Posts </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/" class="text-muted footer-links router-link-active" target="_self"> Book </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/tutorial/build-ecommerce-website-golang-vuejs-gin-aws-lambda-a6f0e242-0cbf-4623-86f3-fbe57e10d80a" class="text-muted footer-links" target="_self"> Video Tutorial </a></li></ul></div><div data-v-78e4b6c6="" class="col-6 col-md"><h6 data-v-78e4b6c6="">About</h6><ul data-v-78e4b6c6="" class="list-unstyled text-small"><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/the-author" class="text-muted footer-links" target="_self"> The author </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/legal" class="text-muted footer-links" target="_self"> Legal Notice </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/feedback" class="text-muted footer-links" target="_self"> Feedback </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/buy-digital-or-hard-copy" class="text-muted footer-links" target="_self"> Buy paper or digital copy </a></li><li data-v-78e4b6c6=""><a data-v-78e4b6c6="" href="/terms-and-conditions" class="text-muted footer-links" target="_self"> Terms and Conditions </a></li></ul></div></div></footer></div></div><div data-v-edfe07a4="" class="col"></div></div></div></div></div><script src="/js/chunk-vendors.6bf1dd9d.js"></script><script src="/js/app.45ad3241.js"></script><div aria-live="polite" class="crisp-client"><div class="cc-rukbw"><div class="cc-9yvsj"><style type="text/css">.crisp-client *:focus-visible {
  outline-color: #004AB5 !important;
}

.crisp-client .cc-1brb6 .cc-co79q {
  color: #FFFFFF !important;
}

.crisp-client .cc-1brb6 .cc-1dvce {
  color: #1972F5 !important;
}

.crisp-client .cc-1brb6 .cc-5t1tm {
  background-color: #FFFFFF !important;
}

.crisp-client .cc-1brb6 .cc-1q2sq {
  background-color: #004AB5 !important;
}

.crisp-client .cc-1brb6 .cc-62iw4 {
  background-color: #055EE1 !important;
}

.crisp-client .cc-1brb6 .cc-1kgzy {
  background-color: #1972F5 !important;
}

.crisp-client .cc-1brb6 .cc-1kgzy *:focus-visible {
  outline-color: #F0F2F5 !important;
}

.crisp-client .cc-1brb6 .cc-m59gn {
  background-color: #EFF5FE !important;
}

.crisp-client .cc-1brb6 .cc-jtuj4 {
  background-color: #F0F2F5 !important;
}

.crisp-client .cc-1brb6 .cc-1ikmr {
  border-color: #FFFFFF !important;
}

.crisp-client .cc-1brb6 .cc-1i61z,
.crisp-client .cc-1brb6 .cc-134r8:hover {
  border-color: #1972F5 !important;
}

.crisp-client .cc-1brb6 .cc-un6tk {
  border-color: rgba(25, 114, 245, 0.2) !important;
}

.crisp-client .cc-1brb6 .cc-weiiy {
  border-bottom-color: #1972F5 !important;
}

.crisp-client .cc-1brb6 .cc-18tkz::placeholder {
  color: #92A9C1 !important;
}

.crisp-client .cc-1brb6 .cc-10xgc::placeholder {
  color: #92A9C1 !important;
}

.crisp-client .cc-1brb6 .cc-y2afy,
.crisp-client .cc-1brb6 .cc-y2afy:active,
.crisp-client .cc-1brb6 .cc-1swm7:hover .cc-17cww,
.crisp-client .cc-1brb6 .cc-1swm7 .cc-17cww:active {
  background: #004AB5 !important;
}

.crisp-client .cc-1brb6 .cc-coh7k,
.crisp-client .cc-1brb6 .cc-1cx9a:hover,
.crisp-client .cc-1brb6 .cc-1xhex[data-active="true"] .cc-ydjl9 {
  background: #0057D7 !important;
}

.crisp-client .cc-1brb6 .cc-y2afy:hover,
.crisp-client .cc-1brb6 .cc-coh7k:hover,
.crisp-client .cc-1brb6 .cc-1cx9a:active {
  background: #0051C8 !important;
}

.crisp-client .cc-1brb6 .cc-coh7k:active {
  background: #004AB5 !important;
}

.crisp-client .cc-1brb6 .cc-aoc5z:hover .cc-fajgc {
  background: #0057D7 !important;
}

.crisp-client .cc-1brb6 .cc-aoc5z .cc-fajgc:active {
  background: #0051C8 !important;
}

.crisp-client .cc-1brb6 .cc-f5i1a,
.crisp-client .cc-1brb6 .cc-70ynx:hover .cc-iuh54,
.crisp-client .cc-1brb6 .cc-70ynx .cc-iuh54:active {
  background: #1972F5 !important;
}

.crisp-client .cc-1brb6 .cc-f5i1a:hover {
  background: #055EE1 !important;
}

.crisp-client .cc-1brb6 .cc-f5i1a:active {
  background: #0057D7 !important;
}

.crisp-client .cc-1brb6 .cc-vibqn::selection,
.crisp-client .cc-1brb6 .cc-vibqn *::selection {
  color: #1c293b !important;
  background-color: #E2EEFF !important;
}</style></div><div class="cc-k4lmp"><style type="text/css">.crisp-client .cc-1brb6 {
  z-index: 1000000;
}</style></div></div><div id="crisp-chatbox" lang="en" dir="ltr" translate="no" tabindex="-1" class="cc-1brb6" data-hidden="false" data-force-show="false" data-color-mode="light" data-availability="away" data-lock-maximized="false" data-website-logo="false" data-last-operator-face="false" data-ongoing-operator-face="false" data-availability-tooltip="false" data-hide-vacation="false" data-blocked="false" data-mobile-view="false" data-full-view="false" data-small-view="false" data-large-view="true" data-has-local-messages="false" data-was-availability-online="false" data-is-activity-ongoing="false" data-hide-on-away="false" data-hide-on-mobile="false" data-position-reverse="false"><div class="cc-1yy0g cc-1wive cc-vibqn"><a data-maximized="false" data-is-failure="false" class="cc-1m2mf" tabindex="0" role="button" aria-label="Open chat" data-pane-animate-entrance="false" data-pop="minimized:open"><span class="cc-6lwfw"><!--v-if--></span><span class="cc-157aw cc-1kgzy"><span data-id="chat_closed" data-is-ongoing="false" class="cc-d73fc"><span class="cc-1bvfm cc-hshc7"><!--v-if--></span></span></span></a></div></div></div></body>
`

const dom = new JSDOM(html);

const article = new Readability(dom.window.document).parse();
console.log(article.textContent);

